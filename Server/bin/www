#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('phantom:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort('3033');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Initialize Elasticsearch
 */
var client = app.get("elastic");
client.indices.create({
  index: "mf",
  body:
  {
    "mappings": {
      "workflows": {
        "properties": {
          "application": { "type": "string" },
          "author": { "type": "string" },
          "tasks": {
            "properties" : {
              "name": { "type": "string" },
              "type": { "type": "string" },
              "next": { "type": "string" }
            }
          }
        }
      },
      "experiments": {
        "properties": {
          "user": { "type": "string" },
          "description": { "type": "string" }
        },
        "_parent": {
          "type": "workflows"
        }
      }
    }
  }
},function(error, response) {
  if (error) {
    if (is_defined(response)) {
      if (response.status != 400) { /* index not already created */
         return;
      }
    } else {
      server.close();
      return;
    }
  }
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function is_defined(variable) {
    return (typeof variable !== 'undefined');
}

